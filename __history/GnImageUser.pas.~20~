unit GnImageUser;

interface

uses
  System.Classes;

type
  TGnImageUser = class(TThread)
  private
   FIimage:integer;

  procedure CreateGnTopImageBOT(LeftShift,TopShift,j,i:integer);
  protected
    procedure Execute; override;
  end;

implementation

 uses Field,PShip1x1,PShip2x2,Pship3x3,Pship4x4,PImage,System.SysUtils;
{ 
  Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);  

  and UpdateCaption could look like,

    procedure TGnImageUser.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; 
    
    or 
    
    Synchronize( 
      procedure 
      begin
        Form1.Caption := 'Updated in thread via an anonymous method' 
      end
      )
    );
    
  where an anonymous method is passed.
  
  Similarly, the developer can call the Queue method with similar parameters as 
  above, instead passing another TThread class as the first parameter, putting
  the calling thread in a queue with the other thread.
    
}

{ TGnImageUser }

procedure TGnImageUser.CreateGnTopImageBOT(LeftShift, TopShift, j, i: integer);
begin
if (j<>0) or (i<>n-1) or (i<>0) or (j<>n-1) then
  PlerImage[j,i]:=TTopImageBOT.Create(PlerImage[j,i]);



if (j<>0) and (i<>n-1) and (i<>0) and (j<>n-1)  then
  begin
  PlerImage[j,i]:=TTopImageBOT.Create(Form1.Panel1);
  PlerImage[j,i].Parent:=Form1.Panel1;
  PlerImage[j,i].Left:=0+LeftShift;
  PlerImage[j,i].Top:=20+TopShift;
  PlerImage[j,i].Width:=20;
  PlerImage[j,i].Height:=20;
  PlerImage[j,i].Picture.LoadFromFile('Textures/Other/Empty.png');
  PlerImage[j,i].Stretch:=True;
  PlerImage[j,i].Visible:=true;
  PlerImage[j,i].Tag:=i;
  end;

end;


procedure TGnImageUser.Execute;
 var i,j,LeftShift,TopShift:integer;
begin

       SetLength(PlerImage,n,n);

       LeftShift:=0;
       TopShift:=0;

       for i := 0 to n-1 do
       begin
        for j := 0 to n-1 do
         begin
        CreateGnTopImageBOT(LeftShift,TopShift,j,i);


        PlerImage[j,i].Fx:=j;
        PlerImage[j,i].Fy:=i;
        LeftShift:=LeftShift+20;
        end;
         LeftShift:=0;
          TopShift:=TopShift+20;
       end;
end;

end.
